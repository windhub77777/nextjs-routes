// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`route generation typescript 1`] = `
"// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.'
import type { NextUrl } from 'nextjs-routes';

declare module 'nextjs-routes' {
  interface NextjsRoutes {
    generatedRoutes: Routes;
  }
}

export type Routes =
  | NextUrl<'/404'>
  | NextUrl<'/[foo]', { foo: string; }>
  | NextUrl<'/[foo]/[bar]/[baz]', { foo: string; bar: string; baz: string; }>
  | NextUrl<'/[foo]/bar/[baz]', { foo: string; baz: string; }>
  | NextUrl<'/[foo]/bar/[baz]/foo/[bar]', { foo: string; baz: string; bar: string; }>
  | NextUrl<'/[foo]/baz', { foo: string; }>
  | NextUrl<'/_debug/health-check'>
  | NextUrl<'/_error/index'>
  | NextUrl<'/api/[[...segments]]', { segments?: string[]; }>
  | NextUrl<'/api/[...segments]', { segments: string[]; }>
  | NextUrl<'/api/bar'>
  | NextUrl<'/foo/[slug]', { slug: string; }>
  | NextUrl<'/index'>
  | NextUrl<'/not-found'>
  | NextUrl<'/settings/bars/[bar]', { bar: string; }>
  | NextUrl<'/settings/bars/[bar]/baz', { bar: string; }>
  | NextUrl<'/settings/foo'>
  | NextUrl<'/settings/index'>

export const Route = {
  404: function<Url extends NextUrl<'/404'>>(opts?: Omit<Url, 'pathname'>): Url {
    return { pathname: '/404', ...opts };
  },
  : function<Url extends NextUrl<'/[foo]', { foo: string; }>>(opts: Omit<Url, 'pathname'>): Url {
    return { pathname: '/[foo]', ...opts };
  },
  : function<Url extends NextUrl<'/[foo]/[bar]/[baz]', { foo: string; bar: string; baz: string; }>>(opts: Omit<Url, 'pathname'>): Url {
    return { pathname: '/[foo]/[bar]/[baz]', ...opts };
  },
  Bar: function<Url extends NextUrl<'/[foo]/bar/[baz]', { foo: string; baz: string; }>>(opts: Omit<Url, 'pathname'>): Url {
    return { pathname: '/[foo]/bar/[baz]', ...opts };
  },
  BarFoo: function<Url extends NextUrl<'/[foo]/bar/[baz]/foo/[bar]', { foo: string; baz: string; bar: string; }>>(opts: Omit<Url, 'pathname'>): Url {
    return { pathname: '/[foo]/bar/[baz]/foo/[bar]', ...opts };
  },
  Baz: function<Url extends NextUrl<'/[foo]/baz', { foo: string; }>>(opts: Omit<Url, 'pathname'>): Url {
    return { pathname: '/[foo]/baz', ...opts };
  },
  DebugHealthCheck: function<Url extends NextUrl<'/_debug/health-check'>>(opts?: Omit<Url, 'pathname'>): Url {
    return { pathname: '/_debug/health-check', ...opts };
  },
  ErrorIndex: function<Url extends NextUrl<'/_error/index'>>(opts?: Omit<Url, 'pathname'>): Url {
    return { pathname: '/_error/index', ...opts };
  },
  Api: function<Url extends NextUrl<'/api/[[...segments]]', { segments?: string[]; }>>(opts: Omit<Url, 'pathname'>): Url {
    return { pathname: '/api/[[...segments]]', ...opts };
  },
  Api: function<Url extends NextUrl<'/api/[...segments]', { segments: string[]; }>>(opts: Omit<Url, 'pathname'>): Url {
    return { pathname: '/api/[...segments]', ...opts };
  },
  ApiBar: function<Url extends NextUrl<'/api/bar'>>(opts?: Omit<Url, 'pathname'>): Url {
    return { pathname: '/api/bar', ...opts };
  },
  Foo: function<Url extends NextUrl<'/foo/[slug]', { slug: string; }>>(opts: Omit<Url, 'pathname'>): Url {
    return { pathname: '/foo/[slug]', ...opts };
  },
  Index: function<Url extends NextUrl<'/index'>>(opts?: Omit<Url, 'pathname'>): Url {
    return { pathname: '/index', ...opts };
  },
  NotFound: function<Url extends NextUrl<'/not-found'>>(opts?: Omit<Url, 'pathname'>): Url {
    return { pathname: '/not-found', ...opts };
  },
  SettingsBars: function<Url extends NextUrl<'/settings/bars/[bar]', { bar: string; }>>(opts: Omit<Url, 'pathname'>): Url {
    return { pathname: '/settings/bars/[bar]', ...opts };
  },
  SettingsBarsBaz: function<Url extends NextUrl<'/settings/bars/[bar]/baz', { bar: string; }>>(opts: Omit<Url, 'pathname'>): Url {
    return { pathname: '/settings/bars/[bar]/baz', ...opts };
  },
  SettingsFoo: function<Url extends NextUrl<'/settings/foo'>>(opts?: Omit<Url, 'pathname'>): Url {
    return { pathname: '/settings/foo', ...opts };
  },
  SettingsIndex: function<Url extends NextUrl<'/settings/index'>>(opts?: Omit<Url, 'pathname'>): Url {
    return { pathname: '/settings/index', ...opts };
  }
} as const;
"
`;
